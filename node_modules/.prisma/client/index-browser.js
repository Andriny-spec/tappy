
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.5.0
 * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
 */
Prisma.prismaVersion = {
  client: "6.5.0",
  engine: "173f8d54f8d52e692c7e27e72a88314ec7aeff60"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  rules: 'rules',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  phone: 'phone',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.PlatformScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  url: 'url',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  platformId: 'platformId',
  description: 'description',
  features: 'features',
  price: 'price',
  interval: 'interval',
  checkoutLink: 'checkoutLink',
  isActive: 'isActive',
  isHighlighted: 'isHighlighted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  additionalUserPrice: 'additionalUserPrice',
  benefits: 'benefits',
  color: 'color',
  discount: 'discount',
  displayOrder: 'displayOrder',
  hasAI: 'hasAI',
  hasClientPortal: 'hasClientPortal',
  hasLeadManagement: 'hasLeadManagement',
  hasMultiChannel: 'hasMultiChannel',
  hasRentalManagement: 'hasRentalManagement',
  hasReports: 'hasReports',
  hasSalesTools: 'hasSalesTools',
  hasTeamManagement: 'hasTeamManagement',
  isFeatured: 'isFeatured',
  isUnlimited: 'isUnlimited',
  maxItems: 'maxItems',
  maxStorage: 'maxStorage',
  maxTokens: 'maxTokens',
  maxUsers: 'maxUsers',
  setupFee: 'setupFee',
  shortDescription: 'shortDescription'
};

exports.Prisma.SubscriberScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  planId: 'planId',
  platformId: 'platformId',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  cancelDate: 'cancelDate',
  cancelReason: 'cancelReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  subscriberId: 'subscriberId',
  planId: 'planId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paymentMethod: 'paymentMethod',
  externalId: 'externalId',
  paymentDate: 'paymentDate',
  refundDate: 'refundDate',
  refundReason: 'refundReason',
  webhookData: 'webhookData',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MetricsScalarFieldEnum = {
  id: 'id',
  platformId: 'platformId',
  date: 'date',
  views: 'views',
  clicks: 'clicks',
  visits: 'visits',
  sales: 'sales',
  revenue: 'revenue',
  refunds: 'refunds',
  refundAmount: 'refundAmount',
  newSubscribers: 'newSubscribers',
  canceledSubscribers: 'canceledSubscribers',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventTrackScalarFieldEnum = {
  id: 'id',
  platformId: 'platformId',
  planId: 'planId',
  userId: 'userId',
  eventType: 'eventType',
  source: 'source',
  medium: 'medium',
  campaign: 'campaign',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  data: 'data',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentConfigScalarFieldEnum = {
  id: 'id',
  kirvanoApiKey: 'kirvanoApiKey',
  kirvanoMerchantId: 'kirvanoMerchantId',
  webhookSecret: 'webhookSecret',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SiteConfigScalarFieldEnum = {
  id: 'id',
  siteName: 'siteName',
  siteUrl: 'siteUrl',
  logoUrl: 'logoUrl',
  faviconUrl: 'faviconUrl',
  primaryColor: 'primaryColor',
  secondaryColor: 'secondaryColor',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogPostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  excerpt: 'excerpt',
  content: 'content',
  coverImage: 'coverImage',
  publishedAt: 'publishedAt',
  seoScore: 'seoScore',
  status: 'status',
  authorId: 'authorId',
  categoryId: 'categoryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  views: 'views',
  shares: 'shares'
};

exports.Prisma.BlogCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrdersScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  planId: 'planId',
  subscriptionId: 'subscriptionId',
  amount: 'amount',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  paymentIntentId: 'paymentIntentId',
  paymentDate: 'paymentDate',
  transactionId: 'transactionId',
  receiptUrl: 'receiptUrl',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlansScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  discountPrice: 'discountPrice',
  durationDays: 'durationDays',
  features: 'features',
  isPopular: 'isPopular',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfilesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  biography: 'biography',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  facebook: 'facebook',
  linkedin: 'linkedin',
  instagram: 'instagram',
  whatsapp: 'whatsapp',
  telegram: 'telegram',
  tiktok: 'tiktok',
  photo: 'photo',
  qrCodeId: 'qrCodeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  views: 'views',
  shares: 'shares',
  clicks: 'clicks'
};

exports.Prisma.SubscriptionsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  planId: 'planId',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  canceledAt: 'canceledAt',
  autoRenew: 'autoRenew',
  lastOrderId: 'lastOrderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  PIX: 'PIX',
  CARTAO_CREDITO: 'CARTAO_CREDITO',
  BOLETO: 'BOLETO',
  TRANSFERENCIA: 'TRANSFERENCIA'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDENTE: 'PENDENTE',
  APROVADO: 'APROVADO',
  RECUSADO: 'RECUSADO',
  REEMBOLSADO: 'REEMBOLSADO',
  CANCELADO: 'CANCELADO'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ATIVA: 'ATIVA',
  PENDENTE: 'PENDENTE',
  CANCELADA: 'CANCELADA',
  EXPIRADA: 'EXPIRADA',
  TRIAL: 'TRIAL'
};

exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  ASSINANTE: 'ASSINANTE'
};

exports.Prisma.ModelName = {
  Admin: 'Admin',
  Account: 'Account',
  Session: 'Session',
  User: 'User',
  VerificationToken: 'VerificationToken',
  Platform: 'Platform',
  Plan: 'Plan',
  Subscriber: 'Subscriber',
  Payment: 'Payment',
  Metrics: 'Metrics',
  EventTrack: 'EventTrack',
  PaymentConfig: 'PaymentConfig',
  SiteConfig: 'SiteConfig',
  BlogPost: 'BlogPost',
  BlogCategory: 'BlogCategory',
  BlogTag: 'BlogTag',
  orders: 'orders',
  plans: 'plans',
  profiles: 'profiles',
  subscriptions: 'subscriptions',
  users: 'users'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
