generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String
  rules     String[]   @default(["admin"])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  posts     BlogPost[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  phone         String?
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  payments      Payment[]
  sessions      Session[]
  subscribers   Subscriber[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Platform {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  url         String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  metrics     Metrics[]
  plans       Plan[]
  subscribers Subscriber[]
}

model Plan {
  id                  String       @id @default(cuid())
  name                String
  platformId          String
  description         String?
  features            String[]
  price               Float
  interval            String
  checkoutLink        String? // Link do checkout do Kirvano
  isActive            Boolean      @default(true)
  isHighlighted       Boolean      @default(false)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  additionalUserPrice Float?
  benefits            String[]
  color               String?
  discount            Float?
  displayOrder        Int          @default(0)
  hasAI               Boolean      @default(false)
  hasClientPortal     Boolean      @default(false)
  hasLeadManagement   Boolean      @default(true)
  hasMultiChannel     Boolean      @default(false)
  hasRentalManagement Boolean      @default(false)
  hasReports          Boolean      @default(true)
  hasSalesTools       Boolean      @default(true)
  hasTeamManagement   Boolean      @default(false)
  isFeatured          Boolean      @default(false)
  isUnlimited         Boolean      @default(false)
  maxItems            Int?
  maxStorage          Int?
  maxTokens           Int?
  maxUsers            Int?
  setupFee            Float?
  shortDescription    String?
  payments            Payment[]
  platform            Platform     @relation(fields: [platformId], references: [id], onDelete: Cascade)
  subscribers         Subscriber[]
}

model Subscriber {
  id           String    @id @default(cuid())
  userId       String
  planId       String
  platformId   String
  status       String
  startDate    DateTime  @default(now())
  endDate      DateTime?
  cancelDate   DateTime?
  cancelReason String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  payments     Payment[]
  plan         Plan      @relation(fields: [planId], references: [id], onDelete: Cascade)
  platform     Platform  @relation(fields: [platformId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String     @id @default(cuid())
  userId        String
  subscriberId  String
  planId        String
  amount        Float
  currency      String     @default("BRL")
  status        String
  paymentMethod String
  externalId    String?
  paymentDate   DateTime?
  refundDate    DateTime?
  refundReason  String?
  webhookData   Json?
  metadata      Json?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  plan          Plan       @relation(fields: [planId], references: [id], onDelete: Cascade)
  subscriber    Subscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Metrics {
  id                  String   @id @default(cuid())
  platformId          String
  date                DateTime @default(now())
  views               Int      @default(0)
  clicks              Int      @default(0)
  visits              Int      @default(0)
  sales               Int      @default(0)
  revenue             Float    @default(0)
  refunds             Int      @default(0)
  refundAmount        Float    @default(0)
  newSubscribers      Int      @default(0)
  canceledSubscribers Int      @default(0)
  metadata            Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  platform            Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)

  @@unique([platformId, date])
}

model EventTrack {
  id         String   @id @default(cuid())
  platformId String?
  planId     String?
  userId     String?
  eventType  String
  source     String?
  medium     String?
  campaign   String?
  ipAddress  String?
  userAgent  String?
  data       Json?
  createdAt  DateTime @default(now())

  @@index([eventType])
  @@index([platformId])
  @@index([userId])
  @@index([createdAt])
}

model PaymentConfig {
  id                String   @id @default(cuid())
  kirvanoApiKey     String?
  kirvanoMerchantId String?
  webhookSecret     String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model SiteConfig {
  id             String   @id @default(cuid())
  siteName       String   @default("Tappy")
  siteUrl        String   @default("https://tappy.id")
  logoUrl        String?
  faviconUrl     String?
  primaryColor   String   @default("#25D366")
  secondaryColor String   @default("#128C7E")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model BlogPost {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  excerpt     String?
  content     String
  coverImage  String?
  publishedAt DateTime?
  seoScore    Int           @default(0)
  status      String        @default("DRAFT") // Valores poss√≠veis: "PUBLISHED", "DRAFT", "ARCHIVED"
  authorId    String
  categoryId  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  author      Admin         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category    BlogCategory? @relation(fields: [categoryId], references: [id])
  tags        BlogTag[]     @relation("PostToTag")
  views       Int           @default(0)
  shares      Int           @default(0)
}

model BlogCategory {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  posts       BlogPost[]
}

model BlogTag {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  posts     BlogPost[] @relation("PostToTag")
}

model orders {
  id              String         @id
  userId          String
  planId          String
  subscriptionId  String?
  amount          Decimal        @db.Decimal(10, 2)
  paymentMethod   PaymentMethod?
  paymentStatus   PaymentStatus  @default(PENDENTE)
  paymentIntentId String?
  paymentDate     DateTime?
  transactionId   String?
  receiptUrl      String?
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime
  plans           plans          @relation(fields: [planId], references: [id])
  subscriptions   subscriptions? @relation(fields: [subscriptionId], references: [id])
  users           users          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model plans {
  id            String          @id
  name          String
  description   String
  price         Decimal         @db.Decimal(10, 2)
  discountPrice Decimal?        @db.Decimal(10, 2)
  durationDays  Int
  features      String[]
  isPopular     Boolean         @default(false)
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  orders        orders[]
  subscriptions subscriptions[]
}

model profiles {
  id        String   @id
  userId    String   @unique
  name      String
  biography String?
  phone     String?
  address   String?
  city      String?
  state     String?
  facebook  String?
  linkedin  String?
  instagram String?
  whatsapp  String?
  telegram  String?
  tiktok    String?
  photo     String?
  qrCodeId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  views     Int      @default(0)
  shares    Int      @default(0)
  clicks    Int      @default(0)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model subscriptions {
  id          String             @id
  userId      String
  planId      String
  status      SubscriptionStatus @default(PENDENTE)
  startDate   DateTime?
  endDate     DateTime?
  canceledAt  DateTime?
  autoRenew   Boolean            @default(true)
  lastOrderId String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime
  orders      orders[]
  plans       plans              @relation(fields: [planId], references: [id])
  users       users              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id            String          @id
  email         String          @unique
  password      String
  role          Role            @default(ASSINANTE)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  orders        orders[]
  profiles      profiles?
  subscriptions subscriptions[]
}

enum PaymentMethod {
  PIX
  CARTAO_CREDITO
  BOLETO
  TRANSFERENCIA
}

enum PaymentStatus {
  PENDENTE
  APROVADO
  RECUSADO
  REEMBOLSADO
  CANCELADO
}

enum Role {
  ADMIN
  ASSINANTE
}

enum SubscriptionStatus {
  ATIVA
  PENDENTE
  CANCELADA
  EXPIRADA
  TRIAL
}
